【为什么需要接口?接口和抽象类的区别?】
    接口就是比“抽象类”还“抽象”的“抽象类”，可以更加规范的对子类进行约束。
    全面地专业地实现了: 规范和具体实现的分离。
    抽象类还提供某些具体实现，接口不提供任何实现，接口中所有方法都是抽象方法。
    接口是完全面 向规范的，规定了一批类具有的公共方法规范。
    从接口的实现者角度看，接口定义了可以向外部提供的服务。
    从接口的调用者角度看，接口定义了实现者能提供那些服务。
    接口是两个模块之间通信的标准，通信的规范。

【接口的本质探讨】
    接口就是规范，定义的是一组规则，体现了现实世界中“如果你是...则必须能...”的思想。
    如果你是天 使，则必须能飞。如果你是汽车，则必须能跑。如果你好人，则必须干掉坏人;如果你是坏人，则 必须欺负好人。
    接口的本质是契约，就像我们人间的法律一样。制定好后大家都遵守。
    OO的精髓，是对对象的抽象，最能体现这一点的就是接口。
    为什么我们讨论设计 模式都只针对具 备了抽象能力的语言(比如c++、java、c#等)，就是因为设计模式所研究的，实际上就是如何合 理的去抽象。

接口与抽象类的区别 抽象类也是类,除了可以写抽象方法以及不能直接new对象之外,其他的和普通类没有什么不一样的。
接口已经另一种类型了,和类是有本质的区别的,所以不能用类的标准去衡量接口。
声明类的关键字是class,声明接口的关键字是interface。 抽象类是用来被继承的,java中的类是单继承。
类A继承了抽象类B,那么类A的对象就属于B类型了,可以使用多态 一个父类的引用,可以指向这个父类的任意子类对象
注:继承的关键字是extends

接口是用来被类实现的,java中的接口可以被多实现。
类A实现接口B、C、D、E..,那么类A的对象就属于B、C、D、E等类型了,可以使用多态 一个接口的引用,可以指向这个接口的任意实现类对象
注:实现的关键字是implements

有用的：
接口中的方法都是抽象方法
接口中的变量都是静态常量(public static final修饰)
一个类可以实现多个接口
一个接口可以继承多个父接口
(相关操作都已在代码中实现)